// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MANAGING_DIRECTOR
  ADMIN
  INVENTORY_MANAGER
  CASHIER
  REPORT_VIEWER
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  role           UserRole
  isActive       Boolean   @default(true)
  lastLogin      DateTime? 
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sales          Sale[]
  blogPosts   BlogPost[]
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Decimal   @db.Decimal(10, 2)
  totalPrice  Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("sale_items")
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Website Content Management Models
model Page {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  content     String    // Rich text content
  metaTitle   String?
  metaDescription String?
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id          String    @id @default(uuid())
  title       String
  description String
  icon        String?   // Icon class or image URL
  imageUrl    String?
  price       Float?
  features    String[]  // Array of features
  isActive    Boolean   @default(true)
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BlogPost {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  imageUrl    String?
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  tags        String[]
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MediaFile {
  id          String    @id @default(uuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  createdAt   DateTime  @default(now())
}

model SiteSettings {
  id          String    @id @default(uuid())
  key         String    @unique
  value       String
  type        String    // text, number, boolean, json
  description String?
  updatedAt   DateTime  @updatedAt
}

model Testimonial {
  id          String    @id @default(uuid())
  name        String
  company     String?
  position    String?
  content     String
  rating      Int       @default(5)
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FAQ {
  id          String    @id @default(uuid())
  question    String
  answer      String
  category    String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Update User model to include blog posts
model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  role           UserRole
  isActive       Boolean   @default(true)
  lastLogin      DateTime? 
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sales          Sale[]
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ContactRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuoteRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String    @default("pending") // pending, quoted, fulfilled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  category        String
  price           Float
  stockQuantity   Int
  lowStockAlert   Int       @default(5)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventoryItems  InventoryItem[]
  saleItems       SaleItem[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  type        String    // "in" or "out"
  notes       String?
  createdAt   DateTime  @default(now())
}

model Sale {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Float
  paymentMethod String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       SaleItem[]
}

model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  product
