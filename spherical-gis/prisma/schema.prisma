generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MANAGING_DIRECTOR
  ADMIN
  INVENTORY_MANAGER
  CASHIER
  REPORT_VIEWER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
  blogPosts BlogPost[]
  mediaFiles MediaFile[]  // Add this line

  @@map("users")
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String?
  category      String
  price         Float
  stockQuantity Int
  lowStockAlert Int             @default(5)
  imageUrl      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  inventoryItems InventoryItem[]
  saleItems     SaleItem[]
  featuredProducts FeaturedProduct[] // Add this line

  @@map("products")
}

model InventoryItem {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  type      String   // \"in\" or \"out\"
  notes     String?
  createdAt DateTime @default(now())

  @@map("inventory_items")
}

model Sale {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  totalAmount   Float
  paymentMethod String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  items         SaleItem[]

  @@map("sales")
}

model SaleItem {
  id         String  @id @default(uuid())
  saleId     String
  sale       Sale    @relation(fields: [saleId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("sale_items")
}

model ContactRequest {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_requests")
}

model QuoteRequest {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String?
  company     String?
  productType String?
  details     String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("quote_requests")
}

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  imageUrl    String?
  isPublished Boolean  @default(false)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog_posts")
}

// New Media Management Models
model MediaFile {
  id          String   @id @default(uuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  category    String   @default("general") // product, carousel, blog, etc.
  isActive    Boolean  @default(true)
  uploadedBy  String
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  carouselItems CarouselItem[]
  
  @@map("media_files")
}

model CarouselItem {
  id        String    @id @default(uuid())
  title     String
  caption   String?
  page      String    // home, services, about, contact, products
  order     Int       @default(0)
  isActive  Boolean   @default(true)
  mediaId   String?
  media     MediaFile? @relation(fields: [mediaId], references: [id])
  // Fallback for external URLs
  externalUrl String?
  type      String    @default("image") // image, video
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("carousel_items")
}

// Page Content Management Models
model PageSection {
  id          String   @id @default(uuid())
  page        String   // home, services, products, training
  section     String   // carousel, featured_products, training_programs, etc.
  title       String?
  subtitle    String?
  content     String?  // JSON content for flexible data
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([page, section])
  @@map("page_sections")
}

model FeaturedProduct {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  page        String   @default("home") // home, products
  title       String?
  description String?
  imageUrl    String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("featured_products")
}

model TrainingProgram {
  id          String   @id @default(uuid())
  title       String
  description String
  duration    String   // e.g., "3 days", "2 weeks"
  level       String   // beginner, intermediate, advanced
  price       Float
  currency    String   @default("USD")
  features    String   // JSON array of features
  imageUrl    String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  maxStudents Int?     // maximum number of students
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("training_programs")
}

model SolarMaterial {
  id          String   @id @default(uuid())
  name        String
  category    String   // panels, inverters, batteries, etc.
  description String?
  specifications String? // JSON object for technical specs
  price       Float?
  imageUrl    String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("solar_materials")
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String?
  metaTitle   String?
  metaDescription String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pages")
}